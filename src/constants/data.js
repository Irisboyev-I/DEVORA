export const topics = [
    {
        emoji: 'üî§',
        titleKey: 'topics.jsx.title',
        descKey: 'topics.jsx.desc',
        link: '/articles/jsx',
    },
    {
        emoji: 'üß©',
        titleKey: 'topics.components.title',
        descKey: 'topics.components.desc',
        link: '/articles/components',
    },
    {
        emoji: 'üì¶',
        titleKey: 'topics.props.title',
        descKey: 'topics.props.desc',
        link: '/articles/props',
    },
    {
        emoji: '‚öôÔ∏è',
        titleKey: 'topics.usestate.title',
        descKey: 'topics.usestate.desc',
        link: '/articles/usestate',
    },
    {
        emoji: 'üîÅ',
        titleKey: 'topics.useeffect.title',
        descKey: 'topics.useeffect.desc',
        link: '/articles/useeffect',
    },
    {
        emoji: 'üß†',
        titleKey: 'topics.usecontext.title',
        descKey: 'topics.usecontext.desc',
        link: '/articles/usecontext',
    },
];

export const articlePreviews = [
    {
        id: 'jsx',
        emoji: 'üî§',
        title: 'topics.jsx.title',
        summary: 'topics.jsx.desc',
        link: '/articles/jsx',
    },
    {
        id: 'components',
        emoji: 'üß©',
        title: 'topics.components.title',
        summary: 'topics.components.desc',
        link: '/articles/components',
    },
    {
        id: 'props',
        emoji: 'üì¶',
        title: 'topics.props.title',
        summary: 'topics.props.desc',
        link: '/articles/props',
    },
    {
        id: 'usestate',
        emoji: '‚öôÔ∏è',
        title: 'topics.usestate.title',
        summary: 'topics.usestate.desc',
        link: '/articles/usestate',
    },
    {
        id: 'useeffect',
        emoji: 'üîÅ',
        title: 'topics.useeffect.title',
        summary: 'topics.useeffect.desc',
        link: '/articles/useeffect',
    },
    {
        id: 'usecontext',
        emoji: 'üß†',
        title: 'topics.usecontext.title',
        summary: 'topics.usecontext.desc',
        link: '/articles/usecontext',
    },
];


export const benefits = [
    { title: 'noSignup' },
    { title: 'free' },
    { title: 'withExamples' },
    { title: 'practicalTips' },
    { title: 'forBeginners' },
];

export const footerData = {
    articles: [
        { key: 'jsx', path: '/articles/jsx' },
        { key: 'components', path: '/articles/components' },
        { key: 'props', path: '/articles/props' },
        { key: 'usestate', path: '/articles/usestate' },
        { key: 'useeffect', path: '/articles/useeffect' },
    ],
    moreArticles: [
        { key: 'useref_usememo', path: '/articles/useref-usememo' },
        { key: 'usecontext', path: '/articles/usecontext' },
        { key: 'customhooks', path: '/articles/customhooks' },
        { key: 'forms', path: '/articles/forms' },
        { key: 'validation', path: '/articles/validationForm' },
        { key: 'api', path: '/articles/api' },
        { key: 'react_query', path: '/articles/react-query' },
        { key: 'rest_graphql', path: '/articles/restAndGraphQL' },
        { key: 'routing', path: '/articles/routing' },
        { key: 'private_routing', path: '/articles/privateRouting' },
        { key: 'tailwind', path: '/articles/tailwind' },
        { key: 'styled_components', path: '/articles/styledComponents' },
        { key: 'conditional_render', path: '/articles/render' },
        { key: 'lifting_state', path: '/articles/lifting-state' },
        { key: 'lazyload', path: '/articles/lazyload' },
        { key: 'more', path: '/articles' },
    ],
    contacts: [
        { type: 'email', text: 'Email: irisboyev.ii@gmail.com' },
        { type: 'telegram', text: 'Telegram: @irisboyevw', href: 'https://t.me/irisboyevw' },
        { type: 'whatsapp', text: 'WhatsApp: +998 20 010 52 21', href: 'https://wa.me/998200105221' },
    ],
};

export const AllArticles = [
    { key: 'jsx', path: '/articles/jsx', descriptionKey: 'articles.jsx.description' },
    { key: 'components', path: '/articles/components', descriptionKey: 'articles.components.description' },
    { key: 'props', path: '/articles/props', descriptionKey: 'articles.props.description' },
    { key: 'usestate', path: '/articles/usestate', descriptionKey: 'articles.usestate.description' },
    { key: 'useeffect', path: '/articles/useeffect', descriptionKey: 'articles.useeffect.description' },
    { key: 'useref_usememo', path: '/articles/useref-usememo', descriptionKey: 'articles.useref_usememo.description' },
    { key: 'usecontext', path: '/articles/usecontext', descriptionKey: 'articles.usecontext.description' },
    { key: 'customhooks', path: '/articles/customhooks', descriptionKey: 'articles.customhooks.description' },
    { key: 'forms', path: '/articles/forms', descriptionKey: 'articles.forms.description' },
    { key: 'validation', path: '/articles/validationForm', descriptionKey: 'articles.validation.description' },
    { key: 'api', path: '/articles/api', descriptionKey: 'articles.api.description' },
    { key: 'react_query', path: '/articles/react-query', descriptionKey: 'articles.react_query.description' },
    { key: 'rest_graphql', path: '/articles/restAndGraphQL', descriptionKey: 'articles.rest_graphql.description' },
    { key: 'routing', path: '/articles/routing', descriptionKey: 'articles.routing.description' },
    { key: 'private_routing', path: '/articles/privateRouting', descriptionKey: 'articles.private_routing.description' },
    { key: 'tailwind', path: '/articles/tailwind', descriptionKey: 'articles.tailwind.description' },
    { key: 'styled_components', path: '/articles/styledComponents', descriptionKey: 'articles.styled_components.description' },
    { key: 'conditional_render', path: '/articles/render', descriptionKey: 'articles.conditional_render.description' },
    { key: 'lifting_state', path: '/articles/lifting-state', descriptionKey: 'articles.lifting_state.description' },
    { key: 'lazyload', path: '/articles/lazyload', descriptionKey: 'articles.lazyload.description' },
];

export const articlesMoreData = [
    {
        key: 'jsx',
        title: {
            ru: 'JSX',
            en: 'JSX',
            uz: 'JSX',
        },
        description: {
            ru: 'JSX ‚Äî —ç—Ç–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ JavaScript, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–∏—Å–∞—Ç—å HTML-–ø–æ–¥–æ–±–Ω—ã–π –∫–æ–¥ –≤–Ω—É—Ç—Ä–∏ React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.',
            en: 'JSX is a syntax extension for JavaScript that allows you to write HTML-like code inside React components.',
            uz: 'JSX ‚Äî bu JavaScript uchun sintaksis kengaytmasi bo‚Äòlib, React komponentlarida HTML-ga o‚Äòxshash kod yozishga imkon beradi.',
        },
        content: {
            ru: `JSX –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø–∏—Å—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–æ–π —Ñ–æ—Ä–º–µ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ–ª–µ–µ –Ω–∞–≥–ª—è–¥–Ω–æ–π –∏ –±–ª–∏–∑–∫–æ–π –∫ –ø—Ä–∏–≤—ã—á–Ω–æ–π HTML-—Ä–∞–∑–º–µ—Ç–∫–µ. –ü–æ–¥ –∫–∞–ø–æ—Ç–æ–º JSX –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–∏ React.createElement, –ø–æ—ç—Ç–æ–º—É –æ–Ω –æ—Å—Ç–∞—ë—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JavaScript-–∫–æ–¥–æ–º.

JSX –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ JavaScript-–≤—ã—Ä–∞–∂–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤. –¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, —É—Å–ª–æ–≤–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞, —Å–ø–∏—Å–∫–∏ –∏ –¥–∞–∂–µ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç—ã.

–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ JSX —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä–æ–≥–æ–≥–æ —Å–æ–±–ª—é–¥–µ–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: –≤—Å–µ —Ç–µ–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç—ã, –∞—Ç—Ä–∏–±—É—Ç—ã –∏–º–µ–Ω—É—é—Ç—Å—è –≤ camelCase (–Ω–∞–ø—Ä–∏–º–µ—Ä, className –≤–º–µ—Å—Ç–æ class), –∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å React-—Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏—à–Ω–µ–≥–æ —É–∑–ª–∞ –≤ DOM.`,
            en: `JSX allows you to describe user interfaces declaratively, making the component structure more intuitive and similar to traditional HTML markup. Under the hood, JSX is transformed into React.createElement calls, so it remains valid JavaScript code.

JSX supports embedding JavaScript expressions inside curly braces, enabling dynamic content rendering. It also supports nested components, conditional rendering, lists, and even styling through objects.

It's important to remember that JSX has strict syntax rules: all tags must be closed, attributes use camelCase naming (e.g., className instead of class), and you can use React fragments to group elements without adding extra nodes to the DOM.`,
            uz: `JSX foydalanuvchi interfeysini deklarativ tarzda ta‚Äôriflash imkonini beradi, bu esa komponentlar tuzilmasini tushunarli va an‚Äôanaviy HTML belgilanishiga o‚Äòxshash qiladi. Ichki jihatdan JSX React.createElement chaqiruvlariga aylantiriladi, shuning uchun u amal qiluvchi JavaScript kodi bo‚Äòlib qoladi.

JSX ichida jingalak qavslar ichida JavaScript ifodalarini joylashtirishni qo‚Äòllab-quvvatlaydi, bu esa komponent mazmunini dinamik boshqarishga imkon beradi. Shuningdek, ichma-ich komponentlar, shartli render qilish, ro‚Äòyxatlar va hatto obyektlar orqali stil berish ham qo‚Äòllaniladi.

Muhimi shundaki, JSX sintaksisiga qat‚Äôiy rioya qilish talab etiladi: barcha teglar yopilgan bo‚Äòlishi kerak, atributlar camelCase formatida bo‚Äòladi (masalan, class o‚Äòrniga className), va React fragmentlari ortiqcha DOM tuguni qo‚Äòshmasdan elementlarni guruhlash uchun ishlatiladi.`,
        },
        exampleJsx: `
import React from 'react';

const UserCard = ({ name, age }) => {
  return (
    <div className="card">
      <h2>–ò–º—è: {name}</h2>
      <p>–í–æ–∑—Ä–∞—Å—Ç: {age}</p>
      <button onClick={() => alert(\`–ü—Ä–∏–≤–µ—Ç, \${name}!\`)}>–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è</button>
    </div>
  );
};

export default UserCard;`,
        exampleTsx: `
import React from 'react';

type UserCardProps = {
  name: string;
  age: number;
};

const UserCard: React.FC<UserCardProps> = ({ name, age }) => {
  return (
    <div className="card">
      <h2>–ò–º—è: {name}</h2>
      <p>–í–æ–∑—Ä–∞—Å—Ç: {age}</p>
      <button onClick={() => alert(\`–ü—Ä–∏–≤–µ—Ç, \${name}!\`)}>–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è</button>
    </div>
  );
};

export default UserCard;`,
        proTips: {
            ru: [
                'JSX –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–¥–∏–Ω –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—ë—Ä—Ç–∫—É <div> –∏–ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã <>...</>.',
                '–í—Å–µ —Ç–µ–≥–∏ (–¥–∞–∂–µ <img /> –∏ <input />) –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç—ã ‚Äî —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ.',
                '–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π if/else –≤–Ω—É—Ç—Ä–∏ JSX ‚Äî –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–∏–º–µ–Ω—è–π —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ &&.',
                '–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ class –≤ JSX –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ className, –∞ for ‚Äî –Ω–∞ htmlFor.',
                '–°—Ç–∞—Ä–∞–π—Å—è –∏–∑–±–µ–≥–∞—Ç—å —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø—Ä—è–º–æ –≤ JSX ‚Äî –≤—ã–Ω–æ—Å–∏ –µ—ë –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.',
            ],
            en: [
                'JSX must return a single root element ‚Äî use a <div> wrapper or fragments <>...</>.',
                'All tags (even <img /> and <input />) must be self-closed ‚Äî this is required.',
                'Avoid using if/else directly in JSX ‚Äî use ternary operators or logical && instead.',
                'Use className instead of class, and htmlFor instead of for.',
                'Avoid complex logic inside JSX ‚Äî move it to separate functions or variables.',
            ],
            uz: [
                'JSX har doim bitta asosiy elementni qaytarishi kerak ‚Äî <div> yoki fragmentlar <>...</> dan foydalaning.',
                'Barcha teglar (hatto <img /> va <input /> ham) yopilgan bo‚Äòlishi kerak ‚Äî bu majburiy.',
                'JSX ichida if/else dan foydalanmang ‚Äî buning o‚Äòrniga ternary operatori yoki && mantiqiy operatorini qo‚Äòllang.',
                'class o‚Äòrniga className, for o‚Äòrniga esa htmlFor yozing.',
                'Murakkab mantiqni JSX ichiga kiritmang ‚Äî uni alohida funksiyalarga yoki o‚Äòzgaruvchilarga ajrating.',
            ],
        }
    },


    {
        key: 'components',
        title: {
            ru: '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã',
            en: 'Components',
            uz: 'Komponentlar',
        },
        description: {
            ru: '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ‚Äî —ç—Ç–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ React-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∏–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ, –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.',
            en: 'Components are the building blocks of React applications, allowing you to create reusable and isolated UI elements.',
            uz: 'Komponentlar ‚Äî bu React ilovalarining asosiy qismlari bo‚Äòlib, qayta ishlatiladigan va izolyatsiyalangan interfeys elementlarini yaratish imkonini beradi.',
        },
        content: {
            ru: `–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ (–∏–ª–∏ –∫–ª–∞—Å—Å—ã), –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç JSX. –û–Ω–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —Ä–∞–∑–±–∏–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏–µ —á–∞—Å—Ç–∏, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–≤–æ—é –ª–æ–≥–∏–∫—É –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ.

–°—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–≤–∞ —Ç–∏–ø–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:
- **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã** ‚Äî –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±, –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–±—ã—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. –° React Hooks –æ–Ω–∏ –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –ø–æ–±–æ—á–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏.
- **–ö–ª–∞—Å—Å–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã** ‚Äî —Ä–∞–Ω—å—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º, –Ω–æ —Å–µ–π—á–∞—Å –∏—Ö –≤—ã—Ç–µ—Å–Ω—è—é—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ.

–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å **props** ‚Äî –≤–Ω–µ—à–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ, –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å **state** ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.

–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–µ–ª–∞—é—Ç –∫–æ–¥ –±–æ–ª–µ–µ –º–æ–¥—É–ª—å–Ω—ã–º, —á–∏—Ç–∞–µ–º—ã–º –∏ –ª–µ–≥–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º. –û–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –¥—Ä—É–≥ –≤ –¥—Ä—É–≥–∞ –∏ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å—Å—è –≤ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.`,
            en: `Components are functions (or classes) that return JSX. They allow you to split the interface into small parts, each responsible for its own logic and rendering.

There are two types of components:
- **Functional components** ‚Äî the most common type, using standard functions. With React Hooks, they can handle state and side effects.
- **Class components** ‚Äî previously used to manage state and lifecycle, now largely replaced by functional ones.

Components can receive **props** ‚Äî external parameters passed from the parent, and manage **state** ‚Äî internal data.

They make the code more modular, readable, and maintainable. Components can be nested and combined into more complex structures.`,
            uz: `Komponentlar ‚Äî bu JSX qaytaradigan funksiyalar (yoki klasslar). Ular interfeysni kichik qismlarga bo‚Äòlishga imkon beradi, har biri o‚Äòz logikasi va ko‚Äòrinishi uchun javob beradi.

Komponentlarning ikki turi mavjud:
- **Funktsional komponentlar** ‚Äî eng keng tarqalgan turi bo‚Äòlib, oddiy funksiyalar asosida ishlaydi. React Hooks yordamida ular holat va effektlarni boshqarishi mumkin.
- **Klass komponentlar** ‚Äî avval holat va lifecycle uchun ishlatilgan, lekin hozirda funksional komponentlar bilan almashtirilmoqda.

Komponentlar **props** (tashqi parametrlar) va **state** (ichki ma ºlumotlar) bilan ishlaydi.

Komponentlar kodni modulli, o‚Äòqiladigan va oson qo‚Äòllab-quvvatlanadigan qiladi. Ular ichma-ich joylashgan bo‚Äòlishi va murakkab tuzilmalarga birlashishi mumkin.`,
        },
        exampleJsx: `
import React from 'react';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º —á–µ—Ä–µ–∑ props
function CustomButton({ label, onClick }) {
  return (
    <button onClick={onClick} className="btn">
      {label}
    </button>
  );
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
export default function App() {
  return (
    <div>
      <CustomButton label="–ù–∞–∂–º–∏ –º–µ–Ω—è" onClick={() => alert('–ü—Ä–∏–≤–µ—Ç!')} />
    </div>
  );
}
`,
        exampleTsx: `
import React from 'react';

type CustomButtonProps = {
  label: string;
  onClick: () => void;
};

const CustomButton: React.FC<CustomButtonProps> = ({ label, onClick }) => {
  return (
    <button onClick={onClick} className="btn">
      {label}
    </button>
  );
};

export default function App() {
  return (
    <div>
      <CustomButton label="–ù–∞–∂–º–∏ –º–µ–Ω—è" onClick={() => alert('–ü—Ä–∏–≤–µ—Ç!')} />
    </div>
  );
}
`,
        proTips: {
            ru: [
                '–ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã (PascalCase), –∏–Ω–∞—á–µ React –≤–æ—Å–ø—Ä–∏–º–µ—Ç –µ–≥–æ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π HTML-—Ç–µ–≥.',
                '–•–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ ‚Äî –æ–¥–∏–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç = –æ–¥–∏–Ω —Ñ–∞–π–ª, —á—Ç–æ–±—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –±—ã–ª–∞ –ø–æ–Ω—è—Ç–Ω–æ–π.',
                '–°—Ç–∞—Ä–∞–π—Å—è –¥–µ–ª–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º–∏ –∏ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.',
                '–ò–∑–±–µ–≥–∞–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ–≥–∏–∫–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ ‚Äî –≤—ã–Ω–æ—Å–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ —Ä–∞—Å—á—ë—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.',
                '–î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π —Ö—É–∫–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ö—É–∫–∏, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –ª–æ–≥–∏–∫–æ–π –±–æ–ª–µ–µ –≥—Ä–∞–º–æ—Ç–Ω–æ.',
            ],
            en: [
                'Component names must start with an uppercase letter (PascalCase), otherwise React treats them as HTML tags.',
                'Best practice: one component = one file, for clearer project structure.',
                'Keep components reusable and isolated from external context.',
                'Avoid too much logic in components ‚Äî move handlers to separate functions.',
                'Use hooks, contexts, or custom hooks to manage logic in complex components.',
            ],
            uz: [
                'Komponent nomlari har doim katta harf bilan boshlanishi kerak (PascalCase), aks holda React uni HTML teg deb qabul qiladi.',
                'Yaxshi amaliyot ‚Äî har bir komponent alohida faylda bo‚Äòlishi.',
                'Komponentlar iloji boricha qayta ishlatiladigan va tashqi kontekstdan mustaqil bo‚Äòlishi kerak.',
                'Murakkab hisob-kitoblarni alohida funksiyalarga ajrating.',
                'Murakkab komponentlar uchun hooklar, kontekstlar yoki custom hooklardan foydalaning.',
            ]
        }
    },


    {
        key: 'props',
        title: {
            ru: '–ü—Ä–æ–ø—Å—ã',
            en: 'Props',
            uz: 'Propslar',
        },
        description: {
            ru: '–ü—Ä–æ–ø—Å—ã (props) ‚Äî —ç—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞. –û–Ω–∏ –¥–µ–ª–∞—é—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º.',
            en: 'Props are parameters passed from a parent to a component. They make components dynamic and reusable.',
            uz: 'Propslar ‚Äî bu komponentga ota-komponentdan uzatiladigan parametrlar. Ular komponentlarni dinamik va qayta ishlatiladigan qiladi.',
        },
        content: {
            ru: `–°–ª–æ–≤–æ "props" ‚Äî —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –æ—Ç "properties" (—Å–≤–æ–π—Å—Ç–≤–∞). –≠—Ç–æ –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π React –ø–µ—Ä–µ–¥–∞—ë—Ç –∫–∞–∂–¥–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.

–ü—Ä–æ–ø—Å—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É –±—ã—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º: –æ–Ω –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ä–∞–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–ö–æ–º–ø–æ–Ω–µ–Ω—Ç **–Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω—è—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–ø—Å—ã** ‚Äî –æ–Ω–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ —Ä–æ–¥–∏—Ç–µ–ª–µ (—á–µ—Ä–µ–∑ state).

–ü—Ä–æ–ø—Å—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
- –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–µ–∫—Å—Ç–∞, —á–∏—Å–µ–ª, —Ñ—É–Ω–∫—Ü–∏–π –∏ JSX,
- –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å/—Å–∫—Ä—ã–≤–∞—Ç—å),
- –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ callback-—Ñ—É–Ω–∫—Ü–∏–∏.`,
            en: `"Props" is short for "properties". It‚Äôs an object that React passes to components, containing all received values.

Props allow components to be reusable by rendering different content based on the passed data.

Components **should not change their own props** ‚Äî they are read-only. Any change must happen in the parent (via state).

You can use props:
- to pass text, numbers, functions, or JSX,
- to control rendering (e.g. show/hide),
- for callbacks from child to parent.`,
            uz: `"Props" ‚Äî bu "properties" (xususiyatlar) so‚Äòzining qisqartmasi. React har bir komponentga bu obyektni uzatadi, u orqali barcha qiymatlar kiradi.

Propslar komponentlarni qayta ishlatiladigan qiladi: ular kiritilgan ma ºlumotga qarab turlicha ko‚Äòrinishni ta ºminlaydi.

Komponent **o‚Äòz propslarini o‚Äòzgartirmasligi kerak** ‚Äî ular faqat o‚Äòqish uchun. O‚Äòzgarishlar ota-komponentda state orqali bajariladi.

Propslar quyidagilar uchun ishlatiladi:
- matn, raqam, funksiya yoki JSX uzatish,
- ko‚Äòrinishni boshqarish (masalan, ko‚Äòrsatish/yashirish),
- child ‚Üí parent callbacklar uchun.`,
        },
        exampleJsx: `
import React from 'react';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ props
function InfoCard({ title, description }) {
  return (
    <div className="card">
      <h2>{title}</h2>
      <p>{description}</p>
    </div>
  );
}

// –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –ø–µ—Ä–µ–¥–∞—é—â–∏–π –¥–∞–Ω–Ω—ã–µ
export default function App() {
  return (
    <InfoCard
      title="–û React"
      description="React ‚Äî —ç—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤."
    />
  );
}
`,
        exampleTsx: `
import React from 'react';

type InfoCardProps = {
  title: string;
  description: string;
};

const InfoCard: React.FC<InfoCardProps> = ({ title, description }) => {
  return (
    <div className="card">
      <h2>{title}</h2>
      <p>{description}</p>
    </div>
  );
};

export default function App() {
  return (
    <InfoCard
      title="–û React"
      description="React ‚Äî —ç—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤."
    />
  );
}
`,
        proTips: {
            ru: [
                '–ü–µ—Ä–µ–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ props ‚Äî —á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ø—Ä–æ—â–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç.',
                '–ò—Å–ø–æ–ª—å–∑—É–π –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∫–æ–¥–∞: `{ title, desc }` –≤–º–µ—Å—Ç–æ `props.title`.',
                '–ü–µ—Ä–µ–¥–∞–≤–∞–π callback-—Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ props, —á—Ç–æ–±—ã –¥–æ—á–µ—Ä–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–≥ –æ–±—â–∞—Ç—å—Å—è —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º.',
                '–ò—Å–ø–æ–ª—å–∑—É–π TypeScript (–∏–ª–∏ PropTypes –≤ JS), —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–∏–ø—ã props –∏ –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫.',
                '–ï—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É –Ω—É–∂–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", –∏—Å–ø–æ–ª—å–∑—É–π `defaultProps` –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö.',
            ],
            en: [
                'Pass only the necessary props ‚Äî the fewer, the simpler the component.',
                'Use destructuring for cleaner code: `{ title, desc }` instead of `props.title`.',
                'Pass callback functions via props so child components can communicate with parents.',
                'Use TypeScript or PropTypes to validate props and avoid bugs.',
                'Use defaultProps or parameter defaults for default values.',
            ],
            uz: [
                'Faqat kerakli propslarni uzat ‚Äî qancha kam bo‚Äòlsa, komponent shunchalik sodda bo‚Äòladi.',
                'Kod tozaligi uchun destrukturizatsiyadan foydalan: `{ title, desc }` o‚Äòrniga `props.title`.',
                'Callback funksiyalarni props orqali uzatib, child ‚Üí parent aloqa o‚Äòrnat.',
                'Propslar turlarini tekshirish uchun TypeScript yoki PropTypes ishlat.',
                'Agar komponentga default qiymat kerak bo‚Äòlsa, `defaultProps` yoki parametr default qiymatidan foydalan.',
            ]
        }
    },


    {
        key: 'usestate',
        title: {
            ru: 'useState',
            en: 'useState',
            uz: 'useState',
        },
        description: {
            ru: '–•—É–∫ useState –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º React —É–ø—Ä–∞–≤–ª—è—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º ‚Äî —Ö—Ä–∞–Ω–∏—Ç—å –∏ –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.',
            en: 'The useState hook lets React components manage local state ‚Äî storing and updating data when users interact.',
            uz: 'useState hook React komponentlariga foydalanuvchi bilan o‚Äòzaro aloqada bo‚Äòlganda lokal holatni boshqarish ‚Äî saqlash va o‚Äòzgartirish imkonini beradi.',
        },
        content: {
            ru: `React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —á–∏—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. –ß—Ç–æ–±—ã —Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—á—ë—Ç—á–∏–∫, —Ñ–æ—Ä–º—É, —Ñ–ª–∞–≥ –ø–æ–∫–∞–∑–∞), –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ö—É–∫ \`useState\`.

–û–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑ –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
1. —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è,
2. —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ.

–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.

–°–∏–Ω—Ç–∞–∫—Å–∏—Å:
\`\`\`js
const [value, setValue] = useState(initialValue);
\`\`\`

–ì–¥–µ \`initialValue\` ‚Äî –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∞ \`setValue\` ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è.`,
            en: `React components are pure functions by default. To store changeable data (like counters, forms, flags), use the \`useState\` hook.

It returns an array with two elements:
1. the current state value,
2. a function to update that value.

Changing state triggers re-rendering.

Syntax:
\`\`\`js
const [value, setValue] = useState(initialValue);
\`\`\`

Where \`initialValue\` is the default value, and \`setValue\` updates it.`,
            uz: `React komponentlari standart bo‚Äòlib ‚Äúpok funksiyalar‚Äùdir. O‚Äòzgaruvchan ma ºlumotlarni (masalan, hisoblagich, forma, bayroq) saqlash uchun \`useState\` hookidan foydalaniladi.

U ikkita elementdan iborat massivni qaytaradi:
1. holatning joriy qiymati,
2. uni o‚Äòzgartirish funksiyasi.

Holat o‚Äòzgarganda komponent qayta render qilinadi.

Sintaksis:
\`\`\`js
const [value, setValue] = useState(initialValue);
\`\`\`

Bu yerda \`initialValue\` ‚Äî boshlang‚Äòich qiymat, \`setValue\` ‚Äî uni yangilovchi funksiya.`,
        },
        exampleJsx: `
import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0); // –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî 0

  const increment = () => {
    setCount(count + 1); // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  };

  return (
    <div>
      <p>–°—á—ë—Ç—á–∏–∫: {count}</p>
      <button onClick={increment}>–£–≤–µ–ª–∏—á–∏—Ç—å</button>
    </div>
  );
}

export default Counter;
`,
        exampleTsx: `
import React, { useState } from 'react';

export default function Counter(): JSX.Element {
  const [count, setCount] = useState<number>(0);

  return (
    <div>
      <p>–°—á—ë—Ç—á–∏–∫: {count}</p>
      <button onClick={() => setCount(count + 1)}>–£–≤–µ–ª–∏—á–∏—Ç—å</button>
    </div>
  );
}
`,
        proTips: {
            ru: [
                '–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏–∑–º–µ–Ω—è–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é: –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å `count++`, –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π `setCount(count + 1)`.',
                '–ï—Å–ª–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é: `setCount(prev => prev + 1)`.',
                '–ú–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –Ω–æ –∏ —Å—Ç—Ä–æ–∫–∏, –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è, –æ–±—ä–µ–∫—Ç—ã –∏ –º–∞—Å—Å–∏–≤—ã.',
                '–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ‚Äî –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π context –∏–ª–∏ state-–º–µ–Ω–µ–¥–∂–µ—Ä—ã.',
                '–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π, –≤—ã–∑—ã–≤–∞–π `useState` –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ ‚Äî –æ–¥–∏–Ω —Ö—É–∫ = –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ.',
            ],
            en: [
                'Never change state directly ‚Äî avoid `count++`, always use `setCount(count + 1)`.',
                'When the new value depends on the old one, use a function: `setCount(prev => prev + 1)`.',
                'You can store not just numbers, but strings, booleans, objects, and arrays.',
                'State resets when the component unmounts ‚Äî use context or state managers for global data.',
                'Use `useState` multiple times to manage multiple values ‚Äî one hook = one piece of state.',
            ],
            uz: [
                'Holatni hech qachon to‚Äòg‚Äòridan-to‚Äòg‚Äòri o‚Äòzgartirmang ‚Äî `count++` emas, `setCount(count + 1)` ishlating.',
                'Agar yangi qiymat eski qiymatga bog‚Äòliq bo‚Äòlsa, funksiya ko‚Äòrinishida yozing: `setCount(prev => prev + 1)`.',
                'Faqat raqam emas, balki string, boolean, obyekt va massivlarni ham saqlashingiz mumkin.',
                'Komponent unmount bo‚Äòlganda holat yo‚Äòqoladi ‚Äî umumiy holat uchun context yoki state manager ishlating.',
                'Ko‚Äòp holatlarni saqlash uchun `useState`ni bir necha marta chaqiring ‚Äî bir hook = bir qiymat.',
            ],
        }
    },


    {
        key: 'useeffect',
        title: {
            ru: 'useEffect',
            en: 'useEffect',
            uz: 'useEffect',
        },
        description: {
            ru: '–•—É–∫ useEffect –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö React: –∑–∞–ø—Ä–æ—Å—ã –∫ API, –ø–æ–¥–ø–∏—Å–∫–∏, —Ç–∞–π–º–µ—Ä—ã, –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.',
            en: 'The useEffect hook is used for handling side effects in React components: API calls, subscriptions, timers, and syncing with external systems.',
            uz: 'useEffect hook React komponentlarida yon ta‚Äôsirlarni bajarish uchun ishlatiladi: API chaqiruvlari, obunalar, taymerlar va tashqi tizimlar bilan sinxronlash.',
        },
        content: {
            ru: `React –ø–æ —Å–≤–æ–µ–π –ø—Ä–∏—Ä–æ–¥–µ ¬´—á–∏—Å—Ç—ã–π¬ª ‚Äî –æ–Ω –Ω–µ –¥–µ–ª–∞–µ—Ç –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ —Ä–µ–Ω–¥–µ—Ä–∞. –ù–æ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –Ω–∞–º –Ω—É–∂–Ω–æ:

- –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ (fetch),
- –∏–∑–º–µ–Ω—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã,
- –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–∞–π–º–µ—Ä—ã,
- –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, window resize),
- –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –∏ –¥—Ä.

–î–ª—è —ç—Ç–æ–≥–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ö—É–∫ useEffect.

–°–∏–Ω—Ç–∞–∫—Å–∏—Å:
  useEffect(() => {
    // –ø–æ–±–æ—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
    return () => {
      // –æ—á–∏—Å—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    }
  }, [–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏]);

- –ü–µ—Ä–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî —Å–∞–º —ç—Ñ—Ñ–µ–∫—Ç, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞.
- –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å ‚Äî –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–≤–∏—Å–∏—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —ç—Ñ—Ñ–µ–∫—Ç–∞.
- –í–æ–∑–≤—Ä–∞—â–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–∞–Ω–∞–ª–æ–≥ componentWillUnmount).`,
            en: `React by nature is ‚Äúpure‚Äù ‚Äî it only renders. But in real-world apps we need to:

- fetch data from server,
- update the document title,
- run timers,
- subscribe to events (like window resize),
- interact with local storage, etc.

That‚Äôs what useEffect is for.

Syntax:
  useEffect(() => {
    // effect logic
    return () => {
      // cleanup (optional)
    }
  }, [dependencies]);

- First function runs after render.
- Second parameter is dependency array to re-run effect.
- The returned function is for cleanup (like componentWillUnmount).`,
            uz: `React tabiatan ‚Äúpok‚Äù ‚Äî u faqat render qiladi. Lekin haqiqiy ilovalarda bizga kerak bo‚Äòladi:

- serverdan ma‚Äôlumot olish (fetch),
- sahifa sarlavhasini o‚Äòzgartirish,
- taymerlar ishga tushirish,
- voqealarga obuna bo‚Äòlish (masalan, window resize),
- localStorage bilan ishlash va boshqalar.

Buning uchun useEffect mavjud.

Sintaksis:
  useEffect(() => {
    // yon ta‚Äôsir
    return () => {
      // tozalash (majburiy emas)
    }
  }, [bog‚Äòliqliklar]);

- Birinchi funksiya ‚Äî effektning o‚Äòzi, renderdan keyin chaqiriladi.
- Ikkinchi parametr ‚Äî qaysi qiymat o‚Äòzgarganda qayta ishlash kerakligi.
- Qaytarilgan funksiya tozalash uchun ishlatiladi (componentWillUnmount o‚Äòxshash).`,
        },
        exampleJsx: `
import React, { useState, useEffect } from 'react';

function Timer() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => {
      setCount(prev => prev + 1);
    }, 1000);

    return () => clearInterval(interval); // –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  }, []); // [] ‚Äî —ç—Ñ—Ñ–µ–∫—Ç —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  return <p>–°–µ–∫—É–Ω–¥ –ø—Ä–æ—à–ª–æ: {count}</p>;
}

export default Timer;
`,
        exampleTsx: `
import React, { useState, useEffect } from 'react';

export default function Timer(): JSX.Element {
  const [count, setCount] = useState<number>(0);

  useEffect(() => {
    const interval = setInterval(() => {
      setCount(prev => prev + 1);
    }, 1000);

    return () => clearInterval(interval); // –æ—á–∏—Å—Ç–∫–∞
  }, []);

  return <p>–°–µ–∫—É–Ω–¥ –ø—Ä–æ—à–ª–æ: {count}</p>;
}
`,
        proTips: {
            ru: [
                '–ü–µ—Ä–µ–¥–∞–≤–∞–π –≤ –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –í–°–Å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞ (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Ñ—É–Ω–∫—Ü–∏–∏). –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –±–∞–≥–∏.',
                '–≠—Ñ—Ñ–µ–∫—Ç –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ([] —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ä–∞–∑) ‚Äî –∫–∞–∫ componentDidMount.',
                '–ë–µ–∑ –º–∞—Å—Å–∏–≤–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π useEffect —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞.',
                '–ï—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä [user], —ç—Ñ—Ñ–µ–∫—Ç –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–∏ –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏–∏.',
                '–ù–µ –≤—ã–∑—ã–≤–∞–π async –Ω–∞–ø—Ä—è–º—É—é ‚Äî –æ–±–µ—Ä–Ω–∏ –≤ async-—Ñ—É–Ω–∫—Ü–∏—é –≤–Ω—É—Ç—Ä–∏ useEffect.',
                '–û—á–∏—â–∞–π —Ç–∞–π–º–µ—Ä—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî —ç—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏.',
            ],
            en: [
                'Include EVERYTHING used inside effect in the dependencies array to avoid bugs.',
                'Effect with empty deps (`[]`) runs once ‚Äî like componentDidMount.',
                'Without deps array, useEffect runs after every render.',
                'With [user] as a dependency, effect reruns when user changes.',
                'Do not call async directly ‚Äî wrap it in an inner async function.',
                'Clean up timers and subscriptions to prevent memory leaks.',
            ],
            uz: [
                'Effekt ichida ishlatilgan BARCHA qiymatlarni dependenciesga yozing ‚Äî bu xatoliklardan saqlaydi.',
                'Bo‚Äòsh deps bilan (`[]`) ‚Äî effekt faqat bir marta ishlaydi.',
                'Agar deps yo‚Äòq bo‚Äòlsa, useEffect har renderdan keyin ishlaydi.',
                '[user] ‚Äî bog‚Äòliq qiymat bo‚Äòlsa, o‚Äòzgarganida effekt ishlaydi.',
                'async funksiyani bevosita chaqirmang ‚Äî uni ichki async funksiyaga o‚Äòrang.',
                'Taymer va obunalarni tozalash ‚Äî xotira oqishlarining oldini oladi.',
            ]
        }
    },


    {
        key: 'useref-usememo',
        title: {
            ru: 'useRef –∏ useMemo',
            en: 'useRef and useMemo',
            uz: 'useRef va useMemo',
        },
        description: {
            ru: '–•—É–∫–∏ useRef –∏ useMemo –ø–æ–∑–≤–æ–ª—è—é—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∞–º–∏ –∏ –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π –≤ React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.',
            en: 'The useRef and useMemo hooks allow you to manage references and memoization in React components to improve performance.',
            uz: 'useRef va useMemo hooklari React komponentlarida havolalarni va memoizatsiyani boshqarishga yordam beradi, bu esa unumdorlikni oshiradi.',
        },
        content: {
            ru: `üîπ useRef:
–•—É–∫ useRef –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–º–µ–Ω—è–µ–º—ã–π –æ–±—ä–µ–∫—Ç —Å .current. –û–Ω —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ DOM-—ç–ª–µ–º–µ–Ω—Ç—É –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É —Ä–µ–Ω–¥–µ—Ä–∞–º–∏, –Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä.

üîπ useMemo:
–•—É–∫ useMemo –º–µ–º–æ–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π. –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Ä–æ–≥–∞—è –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –æ–Ω–∞ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –±–µ–∑ –Ω—É–∂–¥—ã.

–û–±–∞ —Ö—É–∫–∞ –ø–æ–º–æ–≥–∞—é—Ç –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ –Ω–∞–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ —Å–ª–æ–∂–Ω—ã—Ö –∏ —Ç—è–∂—ë–ª—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö.`,
            en: `üîπ useRef:
The useRef hook returns a mutable object with a .current property. It‚Äôs commonly used to access DOM elements directly or store a value that persists across renders without causing re-renders.

üîπ useMemo:
The useMemo hook memoizes the result of a computation. It‚Äôs useful for expensive calculations that shouldn‚Äôt re-run on every render.

Both hooks help optimize and control performance, especially in heavy components.`,
            uz: `üîπ useRef:
useRef hook .current maydoniga ega bo‚Äòlgan o‚Äòzgaruvchan obyektni qaytaradi. U ko‚Äòpincha DOM elementlarga to‚Äòg‚Äòridan-to‚Äòg‚Äòri kirish yoki renderlar orasida o‚Äòzgarmas qiymatlarni saqlash uchun ishlatiladi.

üîπ useMemo:
useMemo hook hisoblash natijalarini memoizatsiya qiladi. Bu ayniqsa murakkab hisoblashlar har safar renderda qayta ishlashini oldini olish uchun foydalidir.

Ikkala hook ham katta va murakkab komponentlarda samaradorlikni oshirish uchun ishlatiladi.`,
        },
        exampleJsx: `
import React, { useRef, useMemo } from 'react';

const ExpensiveComponent = ({ items }) => {
  const renderCount = useRef(0);
  renderCount.current++;

  const total = useMemo(() => {
    console.log('Calculating total...');
    return items.reduce((acc, item) => acc + item.value, 0);
  }, [items]);

  return (
    <div>
      <p>–ò—Ç–æ–≥: {total}</p>
      <p>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω: {renderCount.current} —Ä–∞–∑(–∞)</p>
    </div>
  );
};

export default ExpensiveComponent;
`,
        exampleTsx: `
import React, { useRef, useMemo } from 'react';

interface Item {
  value: number;
}

interface Props {
  items: Item[];
}

const ExpensiveComponent: React.FC<Props> = ({ items }) => {
  const renderCount = useRef(0);
  renderCount.current++;

  const total = useMemo(() => {
    console.log('Calculating total...');
    return items.reduce((acc, item) => acc + item.value, 0);
  }, [items]);

  return (
    <div>
      <p>–ò—Ç–æ–≥: {total}</p>
      <p>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω: {renderCount.current} —Ä–∞–∑(–∞)</p>
    </div>
  );
};

export default ExpensiveComponent;
`,
        proTips: {
            ru: [
                'useRef –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É useState –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ–Ω–¥–µ—Ä.',
                'useMemo –ø—Ä–∏–º–µ–Ω—è–π —Ç–æ–ª—å–∫–æ —Ç–∞–º, –≥–¥–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –¥–æ—Ä–æ–≥–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.',
                '–°–ª–µ–¥–∏ –∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –≤ –º–∞—Å—Å–∏–≤–µ useMemo, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –±–∞–≥–æ–≤.',
            ],
            en: [
                'useRef can be used as an alternative to useState for values that don‚Äôt affect rendering.',
                'Only use useMemo when you have expensive computations.',
                'Always check the dependency array in useMemo to avoid unexpected bugs.',
            ],
            uz: [
                'useRef ni useState o‚Äòrniga foydalanish mumkin ‚Äî agar qiymat renderga ta ºsir qilmasa.',
                'useMemo faqat murakkab hisoblashlar uchun ishlating.',
                'useMemo dependency array ni to‚Äòg‚Äòri belgilash muhim ‚Äî noto‚Äòg‚Äòri holatda xatoliklar yuzaga keladi.',
            ],
        }
    },


    {
        key: 'usecontext',
        title: {
            ru: 'useContext',
            en: 'useContext',
            uz: 'useContext',
        },
        description: {
            ru: '–•—É–∫ useContext –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ React –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞—Ç—å –ø—Ä–æ–ø—Å—ã –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç.',
            en: 'The useContext hook allows accessing global values in React without manually passing props through each component.',
            uz: 'useContext hooki Reactda global qiymatlarni qo‚Äòlda props orqali uzatmasdan olish imkonini beradi.',
        },
        content: {
            ru: `üîπ useContext:
–•—É–∫ useContext –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–≤–ª–µ–∫–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —á–µ—Ä–µ–∑ React.createContext. –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–æ, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–º—É, —è–∑—ã–∫ –∏–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –≥–ª—É–±–æ–∫–æ –≤ –¥–µ—Ä–µ–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –ø—Ä–æ–ø—Å–æ–≤ –Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ.

–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞:
1. –ü—Ä–æ–≤–∞–π–¥–µ—Ä (Provider) ‚Äî –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ.
2. –ü–æ–ª—É—á–∞—Ç–µ–ª—å (Consumer –∏–ª–∏ useContext) ‚Äî –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

–ö–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî —ç—Ç–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ prop drilling –∏ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –∫–æ–¥ –±–æ–ª–µ–µ —á–∏—Å—Ç—ã–º –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–º.`,
            en: `üîπ useContext:
The useContext hook lets you access values from a context created using React.createContext. It‚Äôs especially useful when you need to provide data like theme, language, or user deep in the component tree without prop drilling.

Context includes two parts:
1. Provider ‚Äî wraps a component and supplies the value.
2. Consumer (or useContext) ‚Äî receives the value.

Context helps avoid prop drilling and makes the code cleaner and more scalable.`,
            uz: `üîπ useContext:
useContext hooki React.createContext orqali yaratilgan kontekstdan qiymatlarni olish imkonini beradi. Bu, masalan, tema, til yoki foydalanuvchini chuqur komponent daraxtiga uzatishda props orqali uzatishni oldini oladi.

Context ikkita asosiy qismlardan iborat:
1. Provider ‚Äî komponentni o‚Äòrab oladi va qiymat beradi.
2. Consumer yoki useContext ‚Äî qiymatni oladi.

Context prop drilling o‚Äòrnini bosuvchi yechim bo‚Äòlib, kodni soddaroq va kengaytiriladigan qiladi.`,
        },
        exampleJsx: `
import React, { createContext, useContext } from 'react';

// 1. –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
const ThemeContext = createContext('light');

const ThemedComponent = () => {
  const theme = useContext(ThemeContext);
  return <div>–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {theme}</div>;
};

const App = () => {
  return (
    <ThemeContext.Provider value="dark">
      <ThemedComponent />
    </ThemeContext.Provider>
  );
};

export default App;
`,
        exampleTsx: `
import React, { createContext, useContext } from 'react';

// –°–æ–∑–¥–∞—ë–º —Ç–∏–ø—ã
type Theme = 'light' | 'dark';
const ThemeContext = createContext<Theme>('light');

const ThemedComponent: React.FC = () => {
  const theme = useContext(ThemeContext);
  return <div>–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {theme}</div>;
};

const App: React.FC = () => {
  return (
    <ThemeContext.Provider value="dark">
      <ThemedComponent />
    </ThemeContext.Provider>
  );
};

export default App;
`,
        proTips: {
            ru: [
                '–ö–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –Ω–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–µ–π—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π (—Ç–µ–º–∞, —è–∑—ã–∫, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å).',
                '–ù–µ –ø–æ–º–µ—â–∞–π —á–∞—Å—Ç–æ –∏–∑–º–µ–Ω—è—é—â–µ–µ—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Context ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏.',
                '–ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏–≤–∞—Ç—å –ø–æ —Å–º—ã—Å–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–¥–µ–ª—å–Ω—ã–π ThemeContext –∏ AuthContext).',
            ],
            en: [
                'Context is not global state ‚Äî use it only for shared values like theme, language, or user.',
                'Avoid storing rapidly changing data in context ‚Äî it can trigger unnecessary re-renders.',
                'Split contexts by purpose (e.g., ThemeContext and AuthContext).',
            ],
            uz: [
                'Context ‚Äî bu global state emas, faqat umumiy qiymatlar uchun foydalaning (masalan, tema, til, foydalanuvchi).',
                'Tez-tez o‚Äòzgaradigan qiymatlarni Context ichida saqlamang ‚Äî bu keraksiz qayta chizishlarga olib keladi.',
                'Contextlarni maqsadiga qarab ajrating (masalan, ThemeContext va AuthContext).',
            ],
        }
    },


    {
        key: 'customhooks',
        title: {
            ru: 'Custom Hooks',
            en: 'Custom Hooks',
            uz: 'Custom Hooklar',
        },
        description: {
            ru: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ö—É–∫–∏ (Custom Hooks) –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–¥ —á–∏—Å—Ç—ã–º –∏ —á–∏—Ç–∞–µ–º—ã–º.',
            en: 'Custom Hooks let you reuse logic between components while keeping the code clean and readable.',
            uz: 'Custom Hooklar komponentlar orasida logikani qayta ishlatishga yordam beradi va kodni aniq hamda tushunarli qiladi.',
        },
        content: {
            ru: `üîπ Custom Hooks (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ö—É–∫–∏):
Custom Hooks ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞ \`use\`, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ö—É–∫–∏ –∏ –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –ª–æ–≥–∏–∫—É.

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
- –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏
- –£–ø—Ä–æ—â–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º–∞–º–∏, API, —Å–æ–±—ã—Ç–∏—è–º–∏)

Custom Hook ‚Äî –æ–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –Ω–æ –≤–Ω—É—Ç—Ä–∏ –Ω–µ—ë –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å useState, useEffect –∏ –¥—Ä—É–≥–∏–µ —Ö—É–∫–∏. –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –∏–º—è –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "use" –∏ –æ–Ω –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ –∏–ª–∏ –¥—Ä—É–≥–æ–º —Ö—É–∫–µ.`,
            en: `üîπ Custom Hooks:
Custom Hooks are functions starting with the prefix \`use\` that allow using other hooks and encapsulating reusable logic.

Benefits:
- Reuse logic
- Simplify components
- Centralize behavior (forms, APIs, events)

They are just functions that use hooks like useState or useEffect. Rule: the name must start with "use" and be called only inside a hook or a component.`,
            uz: `üîπ Custom Hooklar:
Custom Hooklar \`use\` bilan boshlanuvchi funksiyalar bo‚Äòlib, ichida boshqa hooklarni chaqirib, qayta ishlatiladigan logikani ajratishga imkon beradi.

Afzalliklari:
- Logikani qayta ishlatish
- Komponentlarni soddalashtirish
- Markazlashgan ishlov (formalar, API, hodisalar)

Custom hooklar oddiy funksiya, lekin ichida useState, useEffect kabi hooklardan foydalaniladi. Muhim: nomi "use" bilan boshlanishi va faqat komponent yoki hook ichida chaqirilishi kerak.`,
        },
        exampleJsx: `// useWindowWidth.js
import { useState, useEffect } from 'react';

function useWindowWidth() {
  const [width, setWidth] = useState(window.innerWidth);

  useEffect(() => {
    const handleResize = () => setWidth(window.innerWidth);
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return width;
}

// App.jsx
import React from 'react';
import useWindowWidth from './useWindowWidth';

function App() {
  const width = useWindowWidth();
  return <div>–¢–µ–∫—É—â–∞—è —à–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞: {width}px</div>;
}

export default App;`,
        exampleTsx: `// useWindowWidth.ts
import { useState, useEffect } from 'react';

function useWindowWidth(): number {
  const [width, setWidth] = useState<number>(window.innerWidth);

  useEffect(() => {
    const handleResize = () => setWidth(window.innerWidth);
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return width;
}

export default useWindowWidth;

// App.tsx
import React from 'react';
import useWindowWidth from './useWindowWidth';

const App: React.FC = () => {
  const width = useWindowWidth();
  return <div>–®–∏—Ä–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞: {width}px</div>;
};

export default App;`,
        proTips: {
            ru: [
                'Custom Hooks –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ª–æ–≥–∏–∫–∏ —Ñ–æ—Ä–º—ã, API-–∑–∞–ø—Ä–æ—Å–æ–≤, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±—Ä–∞—É–∑–µ—Ä–æ–º –∏ —Ç. –¥.',
                '–†–∞–∑–¥–µ–ª—è–π —Ö—É–∫–∏ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é. –û–¥–∏–Ω —Ö—É–∫ ‚Äî –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞.',
                'Custom Hook –¥–æ–ª–∂–µ–Ω —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º —Ö—É–∫–æ–≤: –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —Ö—É–∫–∞.',
            ],
            en: [
                'Use custom hooks for form logic, API calls, browser interaction, etc.',
                'Keep hooks focused ‚Äî one task per hook.',
                'Custom Hooks must follow hook rules: call them only inside components or other hooks.',
            ],
            uz: [
                'Custom Hooklar forma, API so‚Äòrovlari yoki brauzer bilan o‚Äòzaro ta‚Äôsir uchun ishlatiladi.',
                'Har bir hook faqat bitta vazifaga xizmat qilsin.',
                'Custom Hooklar faqat komponent yoki boshqa hook ichida chaqirilishi kerak.',
            ],
        }
    },


    {
        key: 'forms',
        title: {
            ru: '–§–æ—Ä–º—ã –≤ React',
            en: 'Forms in React',
            uz: 'Reactda formalar',
        },
        description: {
            ru: '–§–æ—Ä–º—ã –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Ö –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö React.',
            en: 'Forms allow you to collect user input and process it inside React components.',
            uz: 'Formalar foydalanuvchi ma ºlumotlarini yig ªish va ularni React komponentlarida qayta ishlash imkonini beradi.',
        },
        content: {
            ru: `–í React —Ñ–æ—Ä–º—ã —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é —Å–æ—Å—Ç–æ—è–Ω–∏—è. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –∫–∞–∂–¥—ã–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ useState –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã. –≠—Ç–æ –¥–∞—ë—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –ø–æ–ª–µ–π –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥, –∏–∑–º–µ–Ω—è—Ç—å –µ–≥–æ –∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ñ–æ—Ä–º—ã.

–£–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ‚Äî —ç—Ç–æ –ø–æ–ª—è —Ñ–æ—Ä–º—ã, –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–¥ –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º –∏ —Ä–∞—Å—à–∏—Ä—è–µ–º—ã–º. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ React Hook Form –∏–ª–∏ Formik, –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º–∞–º–∏.`,
            en: `In React, forms are controlled through state. Each input from the user is tracked using useState or similar methods. This gives full control over field behavior and allows validation, transformation, and reacting to form events.

Controlled components are those whose value is set through state. It makes the code predictable and extensible. Libraries like React Hook Form or Formik can simplify working with complex forms.`,
            uz: `Reactda formalar holat (state) orqali boshqariladi. Har bir foydalanuvchi kiritgan qiymat useState yoki boshqa metodlar bilan kuzatiladi. Bu sizga maydonlarning xatti-harakatini to‚Äòliq nazorat qilish, tekshirish va javob berish imkonini beradi.

Boshqariladigan komponentlar ‚Äî bu qiymati state orqali belgilangan formalar. Kodni tushunarli va kengaytiriladigan qiladi. Murakkab formalar uchun React Hook Form yoki Formik kabi kutubxonalar qulaylik yaratadi.`,
        },
        exampleJsx: `
import React, { useState } from 'react';

function ContactForm() {
  const [name, setName] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    alert(\`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è: \${name}\`);
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>
        –ò–º—è:
        <input type="text" value={name} onChange={(e) => setName(e.target.value)} />
      </label>
      <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
    </form>
  );
}

export default ContactForm;`,
        exampleTsx: `
import React, { useState } from 'react';

const ContactForm: React.FC = () => {
  const [name, setName] = useState<string>('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    alert(\`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è: \${name}\`);
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>
        –ò–º—è:
        <input type="text" value={name} onChange={(e) => setName(e.target.value)} />
      </label>
      <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
    </form>
  );
};

export default ContactForm;`,
        proTips: {
            ru: [
                '–ò—Å–ø–æ–ª—å–∑—É–π useState –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Ñ–æ—Ä–º—ã.',
                '–ù–µ –∑–∞–±—ã–≤–∞–π –≤—ã–∑—ã–≤–∞—Ç—å e.preventDefault() –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã.',
                '–†–∞–∑–¥–µ–ª—è–π –ª–æ–≥–∏–∫—É —Ñ–æ—Ä–º—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –±–æ–ª—å—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.',
            ],
            en: [
                'Use useState to control form inputs.',
                'Always call e.preventDefault() when submitting a form.',
                'Separate logic and view in large forms for maintainability.',
            ],
            uz: [
                'Forma qiymatlarini boshqarish uchun useState ishlating.',
                'Formani jo‚Äònatishda e.preventDefault() ni unutmang.',
                'Katta loyihalarda forma logikasini alohida ajrating.',
            ],
        }
    },


    {
        key: 'validationForm',
        title: {
            ru: '–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º –≤ React',
            en: 'Form Validation in React',
            uz: 'Reactda forma validatsiyasi',
        },
        description: {
            ru: '–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–æ –∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏.',
            en: 'Form validation lets you check data correctness before submission.',
            uz: 'Forma validatsiyasi ‚Äî foydalanuvchi ma ºlumotlarini yuborishdan oldin tekshirish usuli.',
        },
        content: {
            ru: `–í–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—ã—Å–∏—Ç—å —É–¥–æ–±—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–°—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–≤–∞ —Ç–∏–ø–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: —Ä—É—á–Ω–∞—è (–Ω–∞–ø–∏—Å–∞–Ω–Ω–∞—è –≤—Ä—É—á–Ω—É—é –ª–æ–≥–∏–∫–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ) –∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫, —Ç–∞–∫–∏—Ö –∫–∞–∫ React Hook Form, Yup, Formik –∏ –¥—Ä—É–≥–∏—Ö. –†—É—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—ë—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –∫–æ–¥–∞. –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É–ø—Ä–æ—â–∞—é—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏ —á–∞—Å—Ç–æ –≤–∫–ª—é—á–∞—é—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Yup –¥–ª—è —Å—Ö–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏.`,
            en: `Validation in forms is needed to ensure the data entered is correct. It helps prevent errors and improves user experience.

There are two types of validation: manual (custom logic written inside the component) and library-based (like React Hook Form, Yup, Formik, etc.). Manual gives full control but requires more code. Libraries simplify the process and often integrate with Yup.`,
            uz: `Formadagi validatsiya foydalanuvchi tomonidan kiritilgan ma ºlumotlarning to‚Äòg‚Äòriligini tekshirish uchun kerak. Bu xatoliklarni kamaytiradi va foydalanuvchi tajribasini oshiradi.

Validatsiya ikki xil bo‚Äòladi: qo‚Äòlda yoziladigan (komponent ichida o‚Äòz logikasi bilan) va kutubxona asosida (React Hook Form, Yup, Formik). Kutubxonalar soddalashtirilgan va Yup bilan ishlashga mos.`,
        },
        exampleJsx: `
import React, { useState } from 'react';

function EmailForm() {
  const [email, setEmail] = useState('');
  const [error, setError] = useState('');

  const validateEmail = (email) => {
    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!validateEmail(email)) {
      setError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
    } else {
      setError('');
      alert('Email –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        placeholder="–í–≤–µ–¥–∏—Ç–µ email"
      />
      {error && <p style={{ color: 'red' }}>{error}</p>}
      <button type="submit">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    </form>
  );
}

export default EmailForm;`,
        exampleTsx: `
import React, { useState } from 'react';

const EmailForm: React.FC = () => {
  const [email, setEmail] = useState<string>('');
  const [error, setError] = useState<string>('');

  const validateEmail = (email: string): boolean => {
    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateEmail(email)) {
      setError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
    } else {
      setError('');
      alert('Email –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        placeholder="–í–≤–µ–¥–∏—Ç–µ email"
      />
      {error && <p style={{ color: 'red' }}>{error}</p>}
      <button type="submit">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    </form>
  );
};

export default EmailForm;`,
        proTips: {
            ru: [
                '–î–æ–±–∞–≤–ª—è–π –ø—Ä–æ—Å—Ç—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ñ–æ—Ä–º.',
                '–î–ª—è —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π Yup –∏ React Hook Form.',
                '–ü–æ–∫–∞–∑—ã–≤–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—à–∏–±–∫–∏ —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å UX.',
            ],
            en: [
                'Use manual validation for small forms.',
                'Use Yup and React Hook Form for complex logic.',
                'Display errors immediately to improve UX.',
            ],
            uz: [
                'Kichik formalar uchun oddiy validatsiyani qo‚Äòlda yozing.',
                'Murakkab holatlar uchun Yup va React Hook Form ishlating.',
                'Xatoliklarni darhol ko‚Äòrsating ‚Äî bu foydalanuvchiga qulay.',
            ],
        }
    }
    ,


    {
        key: 'api',
        title: {
            ru: '–†–∞–±–æ—Ç–∞ —Å API –≤ React',
            en: 'Working with APIs in React',
            uz: 'Reactda API bilan ishlash',
        },
        description: {
            ru: '–†–∞–±–æ—Ç–∞ —Å API –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º.',
            en: 'APIs allow you to fetch or send data between client and server.',
            uz: 'API orqali mijoz va server o‚Äòrtasida ma ºlumot olish va yuborish mumkin.',
        },
        content: {
            ru: `–í React —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞. –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã ‚Äî —ç—Ç–æ fetch –∏ axios.

–ó–∞–ø—Ä–æ—Å—ã –∫ API –æ–±—ã—á–Ω–æ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ useEffect, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤—ã–∑–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞. –¢–∞–∫–∂–µ –≤–∞–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç.`,
            en: `In React, APIs are often used to fetch data from a server. Popular tools include fetch and axios.

API calls are typically made inside useEffect to trigger them on component mount. It‚Äôs also important to handle loading and error states for a better user experience.`,
            uz: `Reactda API yordamida serverdan ma ºlumot olish keng qo‚Äòllaniladi. Eng mashhur usullar ‚Äî fetch va axios.

API chaqiruvlari odatda useEffect ichida bajariladi, bu komponent yuklanganda ishga tushadi. Yuklanish va xatolik holatlarini ham ko‚Äòrsatish foydalanuvchiga qulaylik yaratadi.`,
        },
        exampleJsx: `
import React, { useEffect, useState } from 'react';

function Users() {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    fetch('https://jsonplaceholder.typicode.com/users')
      .then((res) => {
        if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
        return res.json();
      })
      .then((data) => setUsers(data))
      .catch((err) => setError(err.message))
      .finally(() => setLoading(false));
  }, []);

  if (loading) return <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>;
  if (error) return <p>–û—à–∏–±–∫–∞: {error}</p>;

  return (
    <ul>
      {users.map((user) => (
        <li key={user.id}>{user.name}</li>
      ))}
    </ul>
  );
}

export default Users;`,
        exampleTsx: `
import React, { useEffect, useState } from 'react';

interface User {
  id: number;
  name: string;
}

const Users: React.FC = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string>('');

  useEffect(() => {
    fetch('https://jsonplaceholder.typicode.com/users')
      .then((res) => {
        if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
        return res.json();
      })
      .then((data) => setUsers(data))
      .catch((err) => setError(err.message))
      .finally(() => setLoading(false));
  }, []);

  if (loading) return <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>;
  if (error) return <p>–û—à–∏–±–∫–∞: {error}</p>;

  return (
    <ul>
      {users.map((user) => (
        <li key={user.id}>{user.name}</li>
      ))}
    </ul>
  );
};

export default Users;`,
        proTips: {
            ru: [
                '–ò—Å–ø–æ–ª—å–∑—É–π useEffect –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.',
                '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π –æ—à–∏–±–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ.',
                '–ü–æ–¥—É–º–∞–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä.',
            ],
            en: [
                'Use useEffect to load data when the component mounts.',
                'Handle errors and inform the user.',
                'Consider showing a loading indicator.',
            ],
            uz: [
                'Komponent yuklanganda ma ºlumot olish uchun useEffect ishlating.',
                'Xatoliklarni ushlang va foydalanuvchiga bildiring.',
                'Yuklanish indikatorini ko‚Äòrsatish haqida o‚Äòylang.',
            ],
        }
    }
    ,


    {
        key: 'react-query',
        title: {
            ru: '–†–∞–±–æ—Ç–∞ —Å React Query',
            en: 'Working with React Query',
            uz: 'React Query bilan ishlash',
        },
        description: {
            ru: 'React Query ‚Äî —ç—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API.',
            en: 'React Query is a library for managing server state and API requests.',
            uz: 'React Query ‚Äî server holati va API so‚Äòrovlarini boshqarish uchun kutubxona.',
        },
        content: {
            ru: `React Query –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã, –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫. –û–Ω–∞ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–∞ –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏—è—Ö –∫ API –∏ –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–≥–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –±–ª–∞–≥–æ–¥–∞—Ä—è —É–º–Ω–æ–º—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—é.

–° –ø–æ–º–æ—â—å—é useQuery —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞, –∞ useMutation –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.`,
            en: `React Query makes it easy to fetch, cache, and manage server data and loading/error states. It is especially helpful for frequent API interactions and prevents redundant calls through smart caching.

You use useQuery to fetch data and useMutation to send or update data.`,
            uz: `React Query ma ºlumotlarni olish, kechirish va yuklanish/xatolik holatlarini boshqarishni osonlashtiradi. U tez-tez API chaqiruvlari bo‚Äòladigan holatlarda juda foydali va ortiqcha so‚Äòrovlarni oldini oladi.

Ma ºlumot olish uchun useQuery, yuborish yoki yangilash uchun useMutation ishlatiladi.`,
        },
        exampleJsx: `
import React from 'react';
import { useQuery } from '@tanstack/react-query';

const fetchUsers = async () => {
  const res = await fetch('https://jsonplaceholder.typicode.com/users');
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ');
  return res.json();
};

function Users() {
  const { data, isLoading, error } = useQuery(['users'], fetchUsers);

  if (isLoading) return <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>;
  if (error) return <p>–û—à–∏–±–∫–∞: {(error as Error).message}</p>;

  return (
    <ul>
      {data.map((user) => (
        <li key={user.id}>{user.name}</li>
      ))}
    </ul>
  );
}

export default Users;`,
        exampleTsx: `
import React from 'react';
import { useQuery } from '@tanstack/react-query';

interface User {
  id: number;
  name: string;
}

const fetchUsers = async (): Promise<User[]> => {
  const res = await fetch('https://jsonplaceholder.typicode.com/users');
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ');
  return res.json();
};

const Users: React.FC = () => {
  const { data, isLoading, error } = useQuery<User[], Error>(['users'], fetchUsers);

  if (isLoading) return <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>;
  if (error) return <p>–û—à–∏–±–∫–∞: {error.message}</p>;

  return (
    <ul>
      {data?.map((user) => (
        <li key={user.id}>{user.name}</li>
      ))}
    </ul>
  );
};

export default Users;`,
        proTips: {
            ru: [
                'React Query –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫—ç—à–∏—Ä—É–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ.',
                '–¢—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å refetch-–∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ.',
                'useMutation –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è POST, PUT, DELETE –∑–∞–ø—Ä–æ—Å–æ–≤.',
            ],
            en: [
                'React Query automatically caches and updates data.',
                'You can define refetch intervals and refetch on focus.',
                'useMutation is used for POST, PUT, DELETE requests.',
            ],
            uz: [
                'React Query avtomatik kechirish va yangilashni bajaradi.',
                'Refetch intervali va fokusda yangilanishni sozlash mumkin.',
                'POST, PUT, DELETE so‚Äòrovlari uchun useMutation ishlatiladi.',
            ],
        },
    },


    {
        key: 'restAndGraphQL',
        title: {
            ru: 'REST –∏ GraphQL',
            en: 'REST and GraphQL',
            uz: 'REST va GraphQL',
        },
        description: {
            ru: 'REST –∏ GraphQL ‚Äî —ç—Ç–æ –¥–≤–∞ –ø–æ–¥—Ö–æ–¥–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å API. –ö–∞–∂–¥—ã–π –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞.',
            en: 'REST and GraphQL are two different approaches to working with APIs. Each has its own strengths and characteristics.',
            uz: 'REST va GraphQL ‚Äî API bilan ishlashning ikki xil yondashuvi bo‚Äòlib, har birining o‚Äòziga xos afzalliklari bor.',
        },
        content: {
            ru: `REST ‚Äî —ç—Ç–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π —Å—Ç–∏–ª—å, –≥–¥–µ —É –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –µ—Å—Ç—å —Å–≤–æ–π URL, –∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è HTTP-–º–µ—Ç–æ–¥—ã (GET, POST, PUT, DELETE).

GraphQL ‚Äî —ç—Ç–æ —è–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç—É —Å–∞–º–æ–º—É –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–Ω —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –≥–∏–±–∫–∏–º–∏ –∏ —É–º–µ–Ω—å—à–∞–µ—Ç –æ–±—ä–µ–º –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

–û–±–∞ –ø–æ–¥—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö, –≤—ã–±–æ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–∞–¥–∞—á, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã.`,
            en: `REST is an architectural style where each resource has its own URL and different HTTP methods (GET, POST, PUT, DELETE) are used for actions.

GraphQL is a query language that allows the client to specify exactly what data it needs. This makes requests flexible and reduces over-fetching.

Both are widely used in real-world projects, and the choice depends on use case, data structure, and team preference.`,
            uz: `REST ‚Äî bu har bir resurs uchun alohida URL bo‚Äòlgan arxitektura uslubi bo‚Äòlib, harakatlar uchun HTTP metodlari (GET, POST, PUT, DELETE) ishlatiladi.

GraphQL ‚Äî bu mijozga kerakli ma ºlumotlarni aniqlab berishga imkon beruvchi so‚Äòrov tili. U orqali kerakli miqdordagi aniq ma ºlumotlarni olish mumkin.

Ikkalasi ham amaliyotda keng qo‚Äòllaniladi, tanlov esa vazifa, ma ºlumotlar tuzilmasi va jamoa afzalliklariga bog‚Äòliq.`,
        },
        exampleJsx: `
// –ü—Ä–∏–º–µ—Ä REST-–∑–∞–ø—Ä–æ—Å–∞
fetch('https://jsonplaceholder.typicode.com/posts')
  .then((res) => res.json())
  .then((data) => console.log(data));

// –ü—Ä–∏–º–µ—Ä GraphQL-–∑–∞–ø—Ä–æ—Å–∞
fetch('https://countries.trevorblades.com/', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    query: '{ countries { name code } }',
  }),
})
  .then((res) => res.json())
  .then((data) => console.log(data));
`,
        exampleTsx: `
// –ü—Ä–∏–º–µ—Ä REST-–∑–∞–ø—Ä–æ—Å–∞ (TS)
interface Post {
  id: number;
  title: string;
}

fetch('https://jsonplaceholder.typicode.com/posts')
  .then((res) => res.json())
  .then((data: Post[]) => console.log(data));

// –ü—Ä–∏–º–µ—Ä GraphQL-–∑–∞–ø—Ä–æ—Å–∞ (TS)
interface Country {
  name: string;
  code: string;
}

fetch('https://countries.trevorblades.com/', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    query: '{ countries { name code } }',
  }),
})
  .then((res) => res.json())
  .then((data: { data: { countries: Country[] } }) => console.log(data.data.countries));
`,
        proTips: {
            ru: [
                'REST –ø—Ä–æ—â–µ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–≤—Å–µ–º–µ—Å—Ç–Ω–æ.',
                'GraphQL —É–¥–æ–±–µ–Ω –ø—Ä–∏ —Å–ª–æ–∂–Ω—ã—Ö –∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.',
                'GraphQL —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å—Ö–µ–º—ã.',
            ],
            en: [
                'REST is easier to start with and widely used.',
                'GraphQL is better for complex and nested data.',
                'GraphQL requires its own server and schema.',
            ],
            uz: [
                'RESTni boshlash oson va keng tarqalgan.',
                'GraphQL murakkab va ichki ma ºlumotlar uchun qulay.',
                'GraphQL alohida server va sxemani talab qiladi.',
            ],
        },
    },


    {
        key: 'routing',
        title: {
            ru: '–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –≤ React',
            en: 'Routing in React',
            uz: 'Reactda marshrutlash',
        },
        description: {
            ru: '–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏.',
            en: 'Routing lets users navigate between pages in the app without reloading.',
            uz: 'Marshrutlash foydalanuvchiga sahifalar orasida sahifani yangilamasdan harakatlanish imkonini beradi.',
        },
        content: {
            ru: `–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è (routing) –≤ React –æ–±—ã—á–Ω–æ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ react-router-dom. –û–Ω–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL-–∞–¥—Ä–µ—Å–∞.

–ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—Å—Ç—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "/about"), —Ç–∞–∫ –∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "/user/:id"). –ö–æ–º–ø–æ–Ω–µ–Ω—Ç <BrowserRouter> –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∞ <Routes> –∏ <Route> –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç, –∫–∞–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞ –∫–∞–∫–∏—Ö –ø—É—Ç—è—Ö.`,
            en: `Routing in React is usually implemented using the react-router-dom library. It allows navigation between components based on the URL.

You can set up simple routes (like "/about") as well as nested routes and parameters (like "/user/:id"). The <BrowserRouter> component wraps the app, and <Routes> and <Route> define which components appear for which paths.`,
            uz: `Reactda routing odatda react-router-dom kutubxonasi orqali amalga oshiriladi. Bu URL manzili asosida komponentlar orasida harakatlanishni ta ºminlaydi.

Oddiy marshrutlar (masalan, "/about") va parametrlangan yoki ichki marshrutlar ("/user/:id") ham qo‚Äòllab-quvvatlanadi. <BrowserRouter> butun ilovani o‚Äòraydi, <Routes> va <Route> esa yo‚Äòllarga komponentlarni biriktiradi.`,
        },
        exampleJsx: `
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Home from './pages/Home';
import About from './pages/About';

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
      </Routes>
    </BrowserRouter>
  );
}
`,
        exampleTsx: `
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Home from './pages/Home';
import About from './pages/About';

const App: React.FC = () => {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
      </Routes>
    </BrowserRouter>
  );
};
`,
        proTips: {
            ru: [
                '–ò—Å–ø–æ–ª—å–∑—É–π useNavigate –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.',
                '–ù–µ –∑–∞–±—É–¥—å –æ–±–µ—Ä–Ω—É—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ <BrowserRouter>.',
                '–î–ª—è –≤–ª–æ–∂–µ–Ω–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π <Outlet>.',
            ],
            en: [
                'Use useNavigate for programmatic navigation.',
                'Don‚Äôt forget to wrap the app in <BrowserRouter>.',
                'Use <Outlet> for nested routing.',
            ],
            uz: [
                'Dasturiy navigatsiya uchun useNavigate dan foydalan.',
                'Ilovani <BrowserRouter> ichida o‚Äòrashni unutmang.',
                'Ichki marshrutlar uchun <Outlet> ishlating.',
            ],
        },
    },


    {
        key: 'privateRouting',
        title: {
            ru: '–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤ React',
            en: 'Private Routes in React',
            uz: 'Reactda maxfiy yo‚Äòllar (Private Routes)',
        },
        description: {
            ru: '–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∑–∞—â–∏—â–∞—é—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—è –∏—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞.',
            en: 'Private routes protect pages from unauthorized users by redirecting them to the login page.',
            uz: 'Maxfiy yo‚Äòllar ro‚Äòyxatdan o‚Äòtmagan foydalanuvchilarni login sahifasiga yo‚Äònaltirib, ularni himoya qiladi.',
        },
        content: {
            ru: `–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è (private routing) ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± –∑–∞—â–∏—Ç–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.

–≠—Ç–æ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç-–æ–±—ë—Ä—Ç–∫—É, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞.

–¢–∏–ø–∏—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥: —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Redux –∏–ª–∏ Zustand).`,
            en: `Private routing is a way to protect certain routes in the app from unauthorized access.

It's implemented using a wrapper component that checks if the user is authenticated. If not, the user is redirected to the login page.

The usual method is to store auth state in a context or a global store like Redux or Zustand.`,
            uz: `Maxfiy marshrutlash (private routing) ‚Äî bu ba ºzi sahifalarni ro‚Äòyxatdan o‚Äòtmagan foydalanuvchilardan himoya qilish usuli.

Bu foydalanuvchining avtorizatsiya holatini tekshiruvchi o‚Äòrash komponenti orqali amalga oshiriladi. Agar foydalanuvchi avtorizatsiya qilinmagan bo‚Äòlsa, u login sahifasiga yo‚Äònaltiriladi.

Ko‚Äòpincha bu holat Context yoki global holatda (Redux, Zustand) saqlanadi.`,
        },
        exampleJsx: `
// PrivateRoute.jsx
import { Navigate } from 'react-router-dom';

function PrivateRoute({ children, isAuth }) {
  return isAuth ? children : <Navigate to="/login" />;
}

// App.jsx
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Dashboard from './Dashboard';
import Login from './Login';
import PrivateRoute from './PrivateRoute';

function App() {
  const isAuthenticated = true; // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É

  return (
    <BrowserRouter>
      <Routes>
        <Route path="/login" element={<Login />} />
        <Route
          path="/dashboard"
          element={
            <PrivateRoute isAuth={isAuthenticated}>
              <Dashboard />
            </PrivateRoute>
          }
        />
      </Routes>
    </BrowserRouter>
  );
}
`,
        exampleTsx: `
// PrivateRoute.tsx
import { Navigate } from 'react-router-dom';

interface Props {
  children: React.ReactNode;
  isAuth: boolean;
}

const PrivateRoute: React.FC<Props> = ({ children, isAuth }) => {
  return isAuth ? <>{children}</> : <Navigate to="/login" />;
};

// App.tsx
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Dashboard from './Dashboard';
import Login from './Login';
import PrivateRoute from './PrivateRoute';

const App: React.FC = () => {
  const isAuthenticated = true; // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É

  return (
    <BrowserRouter>
      <Routes>
        <Route path="/login" element={<Login />} />
        <Route
          path="/dashboard"
          element={
            <PrivateRoute isAuth={isAuthenticated}>
              <Dashboard />
            </PrivateRoute>
          }
        />
      </Routes>
    </BrowserRouter>
  );
};
`,
        proTips: {
            ru: [
                '–î–µ—Ä–∂–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ Context –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–º store.',
                '–î–æ–±–∞–≤—å —Å–ø–∏–Ω–Ω–µ—Ä, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –µ—â—ë –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è.',
                '–ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–π –∑–∞—â–∏—â—ë–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ isAuth.',
            ],
            en: [
                'Keep auth state in Context or global store.',
                'Add a loading spinner while checking auth status.',
                'Do not render protected components until isAuth is verified.',
            ],
            uz: [
                'Avtorizatsiya holatini Context yoki global store‚Äôda saqla.',
                'Tekshiruv davomida yuklanish indikatorini ko‚Äòrsat.',
                'isAuth tekshirilmaguncha maxfiy sahifalarni render qilma.',
            ],
        },
    },


    {
        key: 'tailwind',
        title: {
            ru: 'Tailwind CSS –≤ React',
            en: 'Tailwind CSS in React',
            uz: 'Reactda Tailwind CSS',
        },
        description: {
            ru: 'Tailwind ‚Äî —ç—Ç–æ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–π CSS-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –±—ã—Å—Ç—Ä–æ –∏ –≥–∏–±–∫–æ —Å—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä—è–º–æ –≤ JSX.',
            en: 'Tailwind is a utility-first CSS framework that allows fast and flexible styling directly in JSX.',
            uz: 'Tailwind ‚Äî bu JSX ichida tez va moslashuvchan uslub berish imkonini beruvchi utility-first CSS framework.',
        },
        content: {
            ru: `Tailwind CSS ‚Äî —ç—Ç–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã—Ö –∫–ª–∞—Å—Å–∞—Ö. –í–º–µ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ CSS —Ç—ã –ø—Ä–∏–º–µ–Ω—è–µ—à—å –∫–ª–∞—Å—Å—ã –ø—Ä—è–º–æ –≤ JSX, –ø–æ–ª—É—á–∞—è –±—ã—Å—Ç—Ä—ã–π –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω.

Tailwind –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è React, —Ç–∞–∫ –∫–∞–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ —Å—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:
1. –£—Å—Ç–∞–Ω–æ–≤–∏ Tailwind —á–µ—Ä–µ–∑ PostCSS/Vite/CRA.
2. –ù–∞—Å—Ç—Ä–æ–π \`tailwind.config.js\` (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞, breakpoints –∏ —Ç.–¥.).
3. –ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞—Å—Å—ã –≤ JSX: \`<div className="bg-blue-500 text-white p-4 rounded-xl">\` –∏ —Ç.–¥.`,
            en: `Tailwind CSS is a utility-first framework. Instead of writing custom CSS, you apply predefined classes directly in JSX, achieving fast and responsive design.

It‚Äôs perfect for React because it lets you style components without context switching.

Setup:
1. Install Tailwind via PostCSS/Vite/CRA.
2. Configure \`tailwind.config.js\` (add custom colors, breakpoints, etc).
3. Use classes in JSX: \`<div className="bg-blue-500 text-white p-4 rounded-xl">\`.`,
            uz: `Tailwind CSS ‚Äî bu utility-first framework bo‚Äòlib, siz alohida CSS yozmasdan, tayyor sinflarni JSX da ishlatishingiz mumkin, bu esa tez va moslashuvchan dizayn yaratadi.

Tailwind React uchun juda mos keladi ‚Äî uslub berishda kontekst almashtirishga hojat yo‚Äòq.

Ulash:
1. Tailwind‚Äôni PostCSS/Vite/CRA orqali o‚Äòrnat.
2. \`tailwind.config.js\` faylini sozla (masalan, ranglar, breakpoint‚Äôlar).
3. JSX ichida sinflarni ishlat: \`<div className="bg-blue-500 text-white p-4 rounded-xl">\`.`,
        },
        exampleJsx: `
// Card.jsx
export default function Card() {
  return (
    <div className="bg-white shadow-md rounded-2xl p-6 max-w-sm">
      <h2 className="text-2xl font-bold mb-2 text-gray-800">–ó–∞–≥–æ–ª–æ–≤–æ–∫</h2>
      <p className="text-gray-600">–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Tailwind CSS.</p>
    </div>
  );
}
`,
        exampleTsx: `
// Card.tsx
import React from 'react';

const Card: React.FC = () => {
  return (
    <div className="bg-white shadow-md rounded-2xl p-6 max-w-sm">
      <h2 className="text-2xl font-bold mb-2 text-gray-800">–ó–∞–≥–æ–ª–æ–≤–æ–∫</h2>
      <p className="text-gray-600">–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Tailwind CSS.</p>
    </div>
  );
};

export default Card;
`,
        proTips: {
            ru: [
                '–ü–ª–∞–Ω–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞—Å—Å–æ–≤ ‚Äî –∏–∑–±–µ–≥–∞–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫.',
                '–ò—Å–ø–æ–ª—å–∑—É–π `@apply` –≤ CSS-–º–æ–¥—É–ª—è—Ö –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∏–ª–µ–π.',
                '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π `tailwind.config.js` –ø–æ–¥ –Ω—É–∂–¥—ã –ø—Ä–æ–µ–∫—Ç–∞ (—Ü–≤–µ—Ç–∞, —à—Ä–∏—Ñ—Ç—ã –∏ —Ç.–¥.).',
            ],
            en: [
                'Plan class structure ‚Äî avoid overly long class strings.',
                'Use `@apply` in CSS modules to reuse styles.',
                'Customize `tailwind.config.js` for project needs (colors, fonts, etc).',
            ],
            uz: [
                'Classlarni tartibli rejalashtir ‚Äî juda uzun class qatorlaridan saqlan.',
                '`@apply` yordamida CSS modullarida uslublarni qayta ishlat.',
                '`tailwind.config.js` faylini loyiha ehtiyojlariga moslashtir (ranglar, shriftlar).',
            ],
        },
    },


    {
        key: 'styledComponents',
        title: {
            ru: 'Styled Components –≤ React',
            en: 'Styled Components in React',
            uz: 'Reactda Styled Components',
        },
        description: {
            ru: 'Styled Components –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–∏—Å–∞—Ç—å CSS –ø—Ä—è–º–æ –≤ JavaScript, —Å–æ–∑–¥–∞–≤–∞—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.',
            en: 'Styled Components allows writing CSS directly in JavaScript, creating isolated and reusable component styles.',
            uz: 'Styled Components ‚Äî bu komponentlar uchun izolyatsiyalangan va qayta ishlatiladigan uslublarni JS ichida yozish imkonini beradi.',
        },
        content: {
            ru: `Styled Components ‚Äî —ç—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ React, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å tagged template literals. –û–Ω–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É.

–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
- –õ–æ–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∏–ª–µ–π: —Å—Ç–∏–ª–∏ –Ω–µ "—É—Ç–µ–∫–∞—é—Ç" –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.
- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å—Ç–∏–ª–∏ —á–µ—Ä–µ–∑ props.
- –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö CSS-—Ñ–∞–π–ª–∞—Ö.

–£—Å—Ç–∞–Ω–æ–≤–∫–∞:
\`npm install styled-components\`

–ü—Ä–∏–º–µ—Ä:
–°–æ–∑–¥–∞—ë–º —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç \`Button\`, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç.`,
            en: `Styled Components is a library for styling React components using tagged template literals. It enables fully scoped styles tied to a specific component.

Benefits:
- Local styles that don't leak outside.
- Dynamic styling using props.
- No need for separate CSS files.

Install:
\`npm install styled-components\`

Example:
Create a styled \`Button\` component and use it like a regular React component.`,
            uz: `Styled Components ‚Äî bu React komponentlarini tagged template literal orqali uslublash uchun kutubxona. U komponentga biriktirilgan mustaqil uslublarni yaratish imkonini beradi.

Afzalliklari:
- Uslublar faqat o‚Äòz komponentiga tegishli bo‚Äòladi.
- Props orqali dinamik uslub berish mumkin.
- CSS fayllar kerak emas.

O‚Äòrnatish:
\`npm install styled-components\`

Misol:
Styled \`Button\` komponenti yaratib, uni oddiy React komponenti sifatida ishlating.`,
        },
        exampleJsx: `
import styled from 'styled-components';

const Button = styled.button\`
  background-color: #4f46e5;
  color: white;
  padding: 12px 24px;
  border-radius: 8px;
  font-size: 16px;
  border: none;

  &:hover {
    background-color: #4338ca;
  }
\`;

export default function App() {
  return <Button>–ù–∞–∂–º–∏ –º–µ–Ω—è</Button>;
}
`,
        exampleTsx: `
import styled from 'styled-components';

const Button = styled.button\`
  background-color: #4f46e5;
  color: white;
  padding: 12px 24px;
  border-radius: 8px;
  font-size: 16px;
  border: none;

  &:hover {
    background-color: #4338ca;
  }
\`;

const App: React.FC = () => {
  return <Button>–ù–∞–∂–º–∏ –º–µ–Ω—è</Button>;
};

export default App;
`,
        proTips: {
            ru: [
                '–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏: `const MyCard = styled.div`.',
                '–ò—Å–ø–æ–ª—å–∑—É–π props –≤–Ω—É—Ç—Ä–∏ —à–∞–±–ª–æ–Ω–∞: `color: \${props => props.primary ? "blue" : "gray"}`.',
                '–ò–∑–±–µ–≥–∞–π –≥–ª—É–±–æ–∫–∏—Ö –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –≤ —Å—Ç–∏–ª—è—Ö ‚Äî –æ–Ω–∏ —É—Å–ª–æ–∂–Ω—è—é—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
            ],
            en: [
                'Rename styled components for clarity: `const MyCard = styled.div`.',
                'Use props in styles: `color: \${props => props.primary ? "blue" : "gray"}`.',
                'Avoid deep nested styles ‚Äî they reduce maintainability.',
            ],
            uz: [
                'Styled komponentlarga tushunarli nom ber: `const MyCard = styled.div`.',
                'Uslublarda propslardan foydalan: `color: \${props => props.primary ? "blue" : "gray"}`.',
                'Qattiq chuqurlikdagi ichki uslublardan saqlaning ‚Äî ularni boshqarish qiyin bo‚Äòladi.',
            ],
        },
    },


    {
        key: 'render',
        title: {
            ru: '–£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤ React',
            en: 'Conditional Rendering in React',
            uz: 'React‚Äôda shartli rendering',
        },
        description: {
            ru: '–£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π. –≠—Ç–æ –æ—Å–Ω–æ–≤–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ React.',
            en: 'Conditional rendering lets you show different elements depending on conditions. It‚Äôs the basis of dynamic UI in React.',
            uz: 'Shartli rendering ‚Äî foydalanuvchi holatiga qarab turli elementlarni ko‚Äòrsatishga imkon beradi. React‚Äôdagi dinamik UI asosi.',
        },
        content: {
            ru: `–£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤ React –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Ç.–¥.

–°–ø–æ—Å–æ–±—ã —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:
1. –û–ø–µ—Ä–∞—Ç–æ—Ä \`if\` –∏–ª–∏ —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–π \`? :\`
2. –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –ò \`&&\`
3. –í–æ–∑–≤—Ä–∞—Ç \`null\` (–µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å)

–ü—Ä–∏–º–µ—Ä —Å —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º:
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –∏–Ω–∞—á–µ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞.`,
            en: `Conditional rendering in React is used to display elements or components based on certain conditions (e.g., user is logged in, loading status).

Ways to render conditionally:
1. \`if\` or ternary \`? :\`
2. Logical AND \`&&\`
3. Return \`null\` if nothing should be shown

Example with ternary:
Show greeting if the user is logged in, otherwise show login button.`,
            uz: `React‚Äôda shartli rendering element yoki komponentni holatga qarab ko‚Äòrsatish uchun ishlatiladi (masalan, foydalanuvchi tizimga kirganmi, yuklanmoqda va hokazo).

Shartli rendering usullari:
1. \`if\` yoki ternary \`? :\`
2. Mantiqiy \`&&\`
3. \`null\` qaytarish (agar hech narsa ko‚Äòrsatilmasa)

Misol:
Agar foydalanuvchi tizimga kirgan bo‚Äòlsa ‚Äî salomlashuv, aks holda login tugmasi.`,
        },
        exampleJsx: `
import React from 'react';

export default function App() {
  const isLoggedIn = true;

  return (
    <div>
      {isLoggedIn ? <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h2> : <button>–í–æ–π—Ç–∏</button>}
    </div>
  );
}
`,
        exampleTsx: `
import React from 'react';

const App: React.FC = () => {
  const isLoggedIn: boolean = true;

  return (
    <div>
      {isLoggedIn ? <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h2> : <button>–í–æ–π—Ç–∏</button>}
    </div>
  );
};

export default App;
`,
        proTips: {
            ru: [
                '–°—Ç–∞—Ä–∞–π—Å—è –Ω–µ –ø–∏—Å–∞—Ç—å —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä—è–º–æ –≤–Ω—É—Ç—Ä–∏ JSX, –≤—ã–Ω–æ—Å–∏ –µ—ë –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.',
                '–ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π `null`.',
                '–õ–æ–≥–∏—á–µ—Å–∫–æ–µ `&&` —É–¥–æ–±–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —É—Å–ª–æ–≤–∏–π: `isVisible && <Component />`.',
            ],
            en: [
                'Avoid writing complex logic directly in JSX ‚Äî extract it to variables.',
                'Return `null` if no rendering is needed.',
                '`&&` is useful for simple conditions: `isVisible && <Component />`.',
            ],
            uz: [
                'Murakkab mantiqni JSX ichida yozishdan saqlaning ‚Äî alohida o‚Äòzgaruvchiga ajrating.',
                'Hech narsa ko‚Äòrsatish kerak bo‚Äòlmasa `null` qaytaring.',
                'Oddiy shartlar uchun `&&` ishlatish qulay: `isVisible && <Component />`.',
            ],
        },
    },


    {
        key: 'lifting-state',
        title: {
            ru: '–ü–æ–¥—ä—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏—è (Lifting State Up) –≤ React',
            en: 'Lifting State Up in React',
            uz: 'React‚Äôda state‚Äôni yuqoriga ko‚Äòtarish (Lifting State Up)',
        },
        description: {
            ru: '–ü–æ–¥—ä—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–µ–ª–∏—Ç—å—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –ø—É—Ç—ë–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–∏–π –æ–±—â–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç.',
            en: 'Lifting state up allows sharing state between components by moving it to their closest common parent.',
            uz: 'State‚Äôni yuqoriga ko‚Äòtarish ‚Äî bir nechta komponent o‚Äòrtasida ma‚Äôlumot almashish uchun uni umumiy ota komponentga ko‚Äòchirishdir.',
        },
        content: {
            ru: `–ö–æ–≥–¥–∞ –¥–≤–∞ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –æ–¥–Ω–æ–º—É –∏ —Ç–æ–º—É –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è, –ª—É—á—à–µ –≤—Å–µ–≥–æ "–ø–æ–¥–Ω—è—Ç—å" —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Ö –æ–±—â–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è. –≠—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è Lifting State Up.

–í–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ö—Ä–∞–Ω–∏–ª —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ä–æ–¥–∏—Ç–µ–ª–µ, –∞ –¥–æ—á–µ—Ä–Ω–∏–µ –ø–æ–ª—É—á–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–ø—Å—ã.

–≠—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –¥–µ–ª–∞–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º –∏ —É–º–µ–Ω—å—à–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏.`,
            en: `When two child components need to access or sync shared data, it's best to "lift" the state up to their common parent ‚Äî this is called Lifting State Up.

Instead of each component managing its own state, the parent holds the shared state and passes it down as props.

This makes your app‚Äôs logic more predictable and avoids duplication.`,
            uz: `Agar ikki yoki undan ko‚Äòp komponent bir xil ma‚Äôlumotdan foydalanishi kerak bo‚Äòlsa, bu ma‚Äôlumotni umumiy ota komponentga ko‚Äòchirish kerak ‚Äî bu "Lifting State Up" deb ataladi.

Har bir komponent o‚Äòz state‚Äôini saqlamasdan, ota komponent umumiy state‚Äôni boshqaradi va uni props orqali uzatadi.

Bu usul ilovaning mantiqiy tuzilishini soddalashtiradi va kodni takrorlashdan saqlaydi.`,
        },
        exampleJsx: `
import React, { useState } from 'react';

function Parent() {
  const [value, setValue] = useState('');

  return (
    <div>
      <Input value={value} onChange={setValue} />
      <Display value={value} />
    </div>
  );
}

function Input({ value, onChange }) {
  return (
    <input
      type="text"
      value={value}
      onChange={(e) => onChange(e.target.value)}
    />
  );
}

function Display({ value }) {
  return <p>–í—ã –≤–≤–µ–ª–∏: {value}</p>;
}

export default Parent;
`,
        exampleTsx: `
import React from 'react';

type InputProps = {
  value: string;
  onChange: (val: string) => void;
};

type DisplayProps = {
  value: string;
};

const Input: React.FC<InputProps> = ({ value, onChange }) => (
  <input
    type="text"
    value={value}
    onChange={(e) => onChange(e.target.value)}
  />
);

const Display: React.FC<DisplayProps> = ({ value }) => (
  <p>–í—ã –≤–≤–µ–ª–∏: {value}</p>
);

const Parent: React.FC = () => {
  const [value, setValue] = React.useState('');

  return (
    <div>
      <Input value={value} onChange={setValue} />
      <Display value={value} />
    </div>
  );
};

export default Parent;
`,
        proTips: {
            ru: [
                '–ü–æ–¥—ä—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–ª–µ–≥—á–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.',
                '–ï—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏ –æ–Ω–∏ —Ç–µ—Å–Ω–æ —Å–≤—è–∑–∞–Ω—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π Context.',
                '–ü–µ—Ä–µ–¥–∞–≤–∞–π –∫–∞–∫ —Å–∞–º–æ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–∞–∫ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è.',
            ],
            en: [
                'Lifting state helps coordinate shared data across components.',
                'If too many components depend on the same data ‚Äî consider using Context.',
                'Pass both value and its update function as props.',
            ],
            uz: [
                'State‚Äôni yuqoriga ko‚Äòtarish komponentlar o‚Äòrtasida ma‚Äôlumot almashishni osonlashtiradi.',
                'Agar komponentlar juda ko‚Äòp va ularning bog‚Äòliqligi yuqori bo‚Äòlsa ‚Äî Context‚Äôdan foydalan.',
                'Props orqali qiymatni ham, uni o‚Äòzgartiruvchi funksiyani ham uzat.',
            ],
        },
    },


    {
        key: 'lazyload',
        title: {
            ru: '–õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (Lazy Loading)',
            en: 'Lazy Loading Components in React',
            uz: 'Komponentlarni kechikkan yuklash (Lazy Loading)',
        },
        description: {
            ru: 'Lazy loading –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã React —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —É–º–µ–Ω—å—à–∞—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–ª—É—á—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.',
            en: 'Lazy loading lets you load React components only when needed, reducing initial bundle size and improving performance.',
            uz: 'Lazy loading faqat kerak bo‚Äòlganida komponentlarni yuklaydi, bu boshlang‚Äòich yuklama hajmini kamaytiradi va samaradorlikni oshiradi.',
        },
        content: {
            ru: `–õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (Lazy Loading) ‚Äî —ç—Ç–æ –ø—Ä–∏—ë–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º —á–∞—Å—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–ª–∏ –º–æ–¥—É–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –æ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω—ã. –í React —ç—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü, –∫ –∫–æ—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–µ –ø–µ—Ä–µ–π—Ç–∏ —Å—Ä–∞–∑—É.

React –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é \`React.lazy()\` –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤. –í–º–µ—Å—Ç–µ —Å \`Suspense\` –º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –ø–æ–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è.`,
            en: `Lazy loading is an optimization strategy where parts of the interface or modules are loaded only when they're actually needed. In React, it's especially useful for large components or routes that may not be accessed immediately.

React provides \`React.lazy()\` for dynamic imports. Combine it with \`Suspense\` to show a fallback UI while the component is loading.`,
            uz: `Lazy loading ‚Äî bu optimallashtirish usuli bo‚Äòlib, UI qismlari yoki modullar faqat kerak bo‚Äòlganda yuklanadi. React‚Äôda bu katta komponentlar yoki sahifalar uchun ayniqsa foydali.

React‚Äôda \`React.lazy()\` yordamida dinamik import qilish mumkin. Yuklanish vaqtida \`Suspense\` orqali zaxira UI (masalan, yuklanmoqda belgisi) ko‚Äòrsatiladi.`,
        },
        exampleJsx: `
import React, { Suspense } from 'react';

const HeavyComponent = React.lazy(() => import('./HeavyComponent'));

export default function App() {
  return (
    <div>
      <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</h1>
      <Suspense fallback={<p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>}>
        <HeavyComponent />
      </Suspense>
    </div>
  );
}
`,
        exampleTsx: `
import React, { Suspense } from 'react';

const HeavyComponent = React.lazy(() => import('./HeavyComponent'));

const App: React.FC = () => {
  return (
    <div>
      <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</h1>
      <Suspense fallback={<p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>}>
        <HeavyComponent />
      </Suspense>
    </div>
  );
};

export default App;
`,
        proTips: {
            ru: [
                'Lazy loading –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ —Ç—è–∂—ë–ª—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.',
                '–û–±–æ—Ä–∞—á–∏–≤–∞–π –ª–µ–Ω–∏–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ `<Suspense>`, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏.',
                '–ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π ‚Äî –ª–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.',
            ],
            en: [
                'Lazy loading is especially useful for routes and heavy components.',
                'Wrap lazy components in `<Suspense>` to handle loading gracefully.',
                'Avoid overusing lazy loading ‚Äî it adds delay on first render.',
            ],
            uz: [
                'Lazy loading yo‚Äòllar (routes) va og‚Äòir komponentlar uchun juda foydali.',
                'Lazily yuklanadigan komponentlarni `<Suspense>` bilan o‚Äòrash kerak.',
                'Har joyda ishlatma ‚Äî bu birinchi yuklashda kechikishga olib keladi.',
            ],
        },
    },
];